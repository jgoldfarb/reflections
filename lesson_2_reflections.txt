What happens when you initialize a repository? Why do you need to do it?

  Initializing a repository creates a hidden directory (.git) in order to store all of the relevant metadata and file versions.

  How is the staging area different from the working directory and the repository? What value do you think it offers?

  The staging area is where you temporarily place your files from your working directory before you commit them to the repository. Depending on the content and the logic of your files, you may want to commit them in different groupings or orders. The staging area helps you to arrange your commits logically.

  How can you use the staging area to make sure you have one commit per logical change?

  You can use different variations of git diff. Git diff without any arguments will compare file changes in the working directory to what has been placed in the staging area. To then compare what's in the staging area to the last commit in the repository, use "git diff --staged". Once you have confirmed that the changes you want are the in the staging area, then it's safe to make the commit. If you see changes to files in the staging area that you do not want to keep e.g. consolidating a line of code that isn't necessary, you can use " git reset --hard" to discard. But be careful - these changes haven't been committed yet, so a reset here isn't reversible.

  What are some situations when branches would be helpful in keeping your history organized? How would branches help?

  If you want to create different versions of your code (e.g. an easier game mode, output in another language, output for a different audience, etc.) without necessarily changing everything else. If you change the master for a different output like another language, it would no longer be available in the other other output i.e. English, since the new language would become the "new" Master. Branches help to keep your versions organized, and also give you the ability to come back to main line to make global changes.

  How do the diagrams help you visualize the branch structure?

  This is critical when you have code that may go in multiple directions, e.g. new features, bug fixes, collaborating with others who are working on separate, but related pieces of content. Without the diagrams, you would also lose "sight" of the relationships between parent/child commits on the branch. Also prevents you from losing access to changes that might not otherwise be reachable on a current branch.
